/* @flow */

export type Action = Object;
export type Dispatch = (action : Action) => void;

export type MatcherResult = {
  wrap: string;
  unwrap: string;
  args: Object;
};

export type Matcher = (pattern : string) => ((action : Action) => MatcherResult | boolean);

export interface Matchers {
  static matcher : Matcher;
  static parameterizedMatcher : Matcher;
};

declare export class Updater<M> {
  constructor(initialModel : M, saga? : () => Generator<any, any, any>, matcher? : Matcher) : Updater<M>;
  case(pattern : string, handler : (model : M, action : Action) => M, matcher? : Matcher) : Updater<M>;
  toReducer() : (model : M, action : Action) => M
};

declare export function forwardTo(dispatch : Dispatch, ...types : Array<string>) : Dispatch;

declare export function wrapAction(action : Action, ...types : Array<string>) : Action;

declare export function view(component : ReactClass<*>) : ReactClass<*>;

declare export default function storeEnhancer(createStore : function) : function;
